/* WARNING: This file has been autogenerated. Do not modify it directly! */

#include <XM/Utils/Utils.hpp>
#include <XM/xMirror.hpp>

using namespace std;
using namespace xm;

Function::Function
(
    const string& uName,
    const Type& retType,
    const Type& paramType0,
    const Type& paramType1,
    const Type& paramType2,
    const Type& paramType3,
    const Type& paramType4,
    const Type& paramType5,
    const Type& paramType6,
    const Type& paramType7
) :
    Item(uName),
    retType_(&retType),
    fullSignature_(true)
{
    this->retType_ = &retType;
    if (paramType0 != getType<void>())
	params_.push_back(new Parameter(paramType0));
    if (paramType1 != getType<void>())
	params_.push_back(new Parameter(paramType1));
    if (paramType2 != getType<void>())
	params_.push_back(new Parameter(paramType2));
    if (paramType3 != getType<void>())
	params_.push_back(new Parameter(paramType3));
    if (paramType4 != getType<void>())
	params_.push_back(new Parameter(paramType4));
    if (paramType5 != getType<void>())
	params_.push_back(new Parameter(paramType5));
    if (paramType6 != getType<void>())
	params_.push_back(new Parameter(paramType6));
    if (paramType7 != getType<void>())
	params_.push_back(new Parameter(paramType7));
}

Variant Function::call
(
    const Variant& arg0,
    const Variant& arg1,
    const Variant& arg2,
    const Variant& arg3,
    const Variant& arg4,
    const Variant& arg5,
    const Variant& arg6,
    const Variant& arg7
) const
{
    Variant& ncArg0 = const_cast<Variant&>(arg0);
    Variant& ncArg1 = const_cast<Variant&>(arg1);
    Variant& ncArg2 = const_cast<Variant&>(arg2);
    Variant& ncArg3 = const_cast<Variant&>(arg3);
    Variant& ncArg4 = const_cast<Variant&>(arg4);
    Variant& ncArg5 = const_cast<Variant&>(arg5);
    Variant& ncArg6 = const_cast<Variant&>(arg6);
    Variant& ncArg7 = const_cast<Variant&>(arg7);
    
    // variants are const anyway
    vector<Variant>& defaults = const_cast<vector<Variant>& >(defaults_);
    
    if (&ncArg0 == &Variant::Void)
    {
        return callImpl
        (
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void
        );
    }
    else if (&ncArg1 == &Variant::Void)
    {
        return callImpl
        (
            ncArg0,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void
        );
    }
    else if (&ncArg2 == &Variant::Void)
    {
        return callImpl
        (
            ncArg0,
            ncArg1,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void
        );
    }
    else if (&ncArg3 == &Variant::Void)
    {
        return callImpl
        (
            ncArg0,
            ncArg1,
            ncArg2,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void
        );
    }
    else if (&ncArg4 == &Variant::Void)
    {
        return callImpl
        (
            ncArg0,
            ncArg1,
            ncArg2,
            ncArg3,
            Variant::Void,
            Variant::Void,
            Variant::Void,
            Variant::Void
        );
    }
    else if (&ncArg5 == &Variant::Void)
    {
        return callImpl
        (
            ncArg0,
            ncArg1,
            ncArg2,
            ncArg3,
            ncArg4,
            Variant::Void,
            Variant::Void,
            Variant::Void
        );
    }
    else if (&ncArg6 == &Variant::Void)
    {
        return callImpl
        (
            ncArg0,
            ncArg1,
            ncArg2,
            ncArg3,
            ncArg4,
            ncArg5,
            Variant::Void,
            Variant::Void
        );
    }
    else if (&ncArg7 == &Variant::Void)
    {
        return callImpl
        (
            ncArg0,
            ncArg1,
            ncArg2,
            ncArg3,
            ncArg4,
            ncArg5,
            ncArg6,
            Variant::Void
        );
    }
    else
    {
        return callImpl
        (
            ncArg0,
            ncArg1,
            ncArg2,
            ncArg3,
            ncArg4,
            ncArg5,
            ncArg6,
            ncArg7
        );
    }
}


Variant Function::callV(vector<Variant> args) const
{   
    if (args.size() == 0)
        return call
        (
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void
        ); 
    if (args.size() == 1)
        return call
        (
           args[0],
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void
        ); 
    if (args.size() == 2)
        return call
        (
           args[0],
           args[1],
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void
        ); 
    if (args.size() == 3)
        return call
        (
           args[0],
           args[1],
           args[2],
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void
        ); 
    if (args.size() == 4)
        return call
        (
           args[0],
           args[1],
           args[2],
           args[3],
           Variant::Void,
           Variant::Void,
           Variant::Void,
           Variant::Void
        ); 
    if (args.size() == 5)
        return call
        (
           args[0],
           args[1],
           args[2],
           args[3],
           args[4],
           Variant::Void,
           Variant::Void,
           Variant::Void
        ); 
    if (args.size() == 6)
        return call
        (
           args[0],
           args[1],
           args[2],
           args[3],
           args[4],
           args[5],
           Variant::Void,
           Variant::Void
        ); 
    if (args.size() == 7)
        return call
        (
           args[0],
           args[1],
           args[2],
           args[3],
           args[4],
           args[5],
           args[6],
           Variant::Void
        ); 
    else
    {
        return callImpl
        (
            args[0],
            args[1],
            args[2],
            args[3],
            args[4],
            args[5],
            args[6],
            args[7]
        );
    }
}


Variant Function::callImpl
(
    Variant& arg0,
    Variant& arg1,
    Variant& arg2,
    Variant& arg3,
    Variant& arg4,
    Variant& arg5,
    Variant& arg6,
    Variant& arg7
) const
{
    (void)(arg0);
    (void)(arg1);
    (void)(arg2);
    (void)(arg3);
    (void)(arg4);
    (void)(arg5);
    (void)(arg6);
    (void)(arg7);
    return Variant::Void;
}


void Function::setDefaultArgs
(
    const Variant& arg0,
    const Variant& arg1,
    const Variant& arg2,
    const Variant& arg3,
    const Variant& arg4,
    const Variant& arg5,
    const Variant& arg6,
    const Variant& arg7
)
{
    Variant& ncArg0 = const_cast<Variant&>(arg0);
    Variant& ncArg1 = const_cast<Variant&>(arg1);
    Variant& ncArg2 = const_cast<Variant&>(arg2);
    Variant& ncArg3 = const_cast<Variant&>(arg3);
    Variant& ncArg4 = const_cast<Variant&>(arg4);
    Variant& ncArg5 = const_cast<Variant&>(arg5);
    Variant& ncArg6 = const_cast<Variant&>(arg6);
    Variant& ncArg7 = const_cast<Variant&>(arg7);
    
    defaults_.clear();
    defaults_.resize(XM_FUNCTION_PARAM_MAX);
    ncArg0.setConst();
    defaults_[0] = arg0;
    ncArg1.setConst();
    defaults_[1] = arg1;
    ncArg2.setConst();
    defaults_[2] = arg2;
    ncArg3.setConst();
    defaults_[3] = arg3;
    ncArg4.setConst();
    defaults_[4] = arg4;
    ncArg5.setConst();
    defaults_[5] = arg5;
    ncArg6.setConst();
    defaults_[6] = arg6;
    ncArg7.setConst();
    defaults_[7] = arg7;
}


Function::~Function()
{
    Const_Prameter_Vector::iterator ite = params_.begin();
    while(ite != params_.end())
    {
        delete *ite;
        ite ++;
    }
}
