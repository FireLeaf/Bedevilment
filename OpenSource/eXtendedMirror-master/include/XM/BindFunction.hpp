/* WARNING: This file has been autogenerated. Do not modify it directly! */

#ifndef XM_BINDFUNCTION_HPP
#define	XM_BINDFUNCTION_HPP


#define XM_FUNCTION_PARAM_MAX 8


namespace xm {


template
<
    typename RetT
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_0_Params
        <
            RetT
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}


template
<
    typename RetT,
    typename ParamT0
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
        ParamT0
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_1_Params
        <
            RetT,
            ParamT0
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
        ParamT0,
        ParamT1
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_2_Params
        <
            RetT,
            ParamT0,
            ParamT1
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
        ParamT0,
        ParamT1,
        ParamT2
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_3_Params
        <
            RetT,
            ParamT0,
            ParamT1,
            ParamT2
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_4_Params
        <
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_5_Params
        <
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_6_Params
        <
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    registerType<ParamT6>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_7_Params
        <
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6,
    typename ParamT7
>
Function& bindFunction
(
    const std::string& name,
    RetT (*function)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6,
        ParamT7
    )
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    registerType<ParamT6>();
    registerType<ParamT7>();
    
    std::pair<std::string, std::string> nameParts = splitName(name, NameTail);
    Namespace& name_space = defineNamespace(nameParts.first);

    // create the proper Function
    Function* xmFunction = new FunctionImpl_8_Params
        <
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6,
            ParamT7
        >
        ( nameParts.second, name_space, function );
    name_space.addItem(*xmFunction);
    return *xmFunction;
}



} // namespace xm

#endif	/* XM_BINDFUNCTION_HPP */