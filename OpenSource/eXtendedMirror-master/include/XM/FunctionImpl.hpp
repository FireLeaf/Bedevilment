/* WARNING: This file has been autogenerated. Do not modify it directly! */

#ifndef XM_FUNCTIONIMPL_HPP
#define	XM_FUNCTIONIMPL_HPP

namespace xm{


template
<
    typename RetT
>
class FunctionImpl_0_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    
    FunctionImpl_0_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>()
            
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg0);
        (void)(arg1);
        (void)(arg2);
        (void)(arg3);
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        const NqRetT& returnValue = function_
        (
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
    );
};


template
<
>
class FunctionImpl_0_Params
<
    void
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    
    FunctionImpl_0_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>()
            
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg0);
        (void)(arg1);
        (void)(arg2);
        (void)(arg3);
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        function_
        (
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
    );
};


template
<
    typename RetT,
    typename ParamT0
>
class FunctionImpl_1_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    
    FunctionImpl_1_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg1);
        (void)(arg2);
        (void)(arg3);
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        const NqRetT& returnValue = function_
        (
            arg0.as<NqParamT0>()
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
        ParamT0
    );
};


template
<
    typename ParamT0
>
class FunctionImpl_1_Params
<
    void,
    ParamT0
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    
    FunctionImpl_1_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg1);
        (void)(arg2);
        (void)(arg3);
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        function_
        (
            arg0.as<NqParamT0>()
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
        ParamT0
    );
};


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1
>
class FunctionImpl_2_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    
    FunctionImpl_2_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg2);
        (void)(arg3);
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        const NqRetT& returnValue = function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>()
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1
    );
};


template
<
    typename ParamT0,
    typename ParamT1
>
class FunctionImpl_2_Params
<
    void,
    ParamT0,
    ParamT1
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    
    FunctionImpl_2_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg2);
        (void)(arg3);
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>()
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1
    );
};


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2
>
class FunctionImpl_3_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    
    FunctionImpl_3_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg3);
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        const NqRetT& returnValue = function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>()
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2
    );
};


template
<
    typename ParamT0,
    typename ParamT1,
    typename ParamT2
>
class FunctionImpl_3_Params
<
    void,
    ParamT0,
    ParamT1,
    ParamT2
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    
    FunctionImpl_3_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg3);
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>()
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2
    );
};


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3
>
class FunctionImpl_4_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    
    FunctionImpl_4_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        const NqRetT& returnValue = function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>()
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3
    );
};


template
<
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3
>
class FunctionImpl_4_Params
<
    void,
    ParamT0,
    ParamT1,
    ParamT2,
    ParamT3
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    
    FunctionImpl_4_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg4);
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>()
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3
    );
};


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4
>
class FunctionImpl_5_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    typedef typename RemoveConst<typename RemoveReference<ParamT4>::Type>::Type
        NqParamT4;
    
    FunctionImpl_5_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>(),
            getType<ParamT4>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        const NqRetT& returnValue = function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>(),
            arg4.as<NqParamT4>()
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4
    );
};


template
<
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4
>
class FunctionImpl_5_Params
<
    void,
    ParamT0,
    ParamT1,
    ParamT2,
    ParamT3,
    ParamT4
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    typedef typename RemoveConst<typename RemoveReference<ParamT4>::Type>::Type
        NqParamT4;
    
    FunctionImpl_5_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>(),
            getType<ParamT4>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg5);
        (void)(arg6);
        (void)(arg7);
        function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>(),
            arg4.as<NqParamT4>()
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4
    );
};


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5
>
class FunctionImpl_6_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    typedef typename RemoveConst<typename RemoveReference<ParamT4>::Type>::Type
        NqParamT4;
    typedef typename RemoveConst<typename RemoveReference<ParamT5>::Type>::Type
        NqParamT5;
    
    FunctionImpl_6_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>(),
            getType<ParamT4>(),
            getType<ParamT5>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg6);
        (void)(arg7);
        const NqRetT& returnValue = function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>(),
            arg4.as<NqParamT4>(),
            arg5.as<NqParamT5>()
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5
    );
};


template
<
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5
>
class FunctionImpl_6_Params
<
    void,
    ParamT0,
    ParamT1,
    ParamT2,
    ParamT3,
    ParamT4,
    ParamT5
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    typedef typename RemoveConst<typename RemoveReference<ParamT4>::Type>::Type
        NqParamT4;
    typedef typename RemoveConst<typename RemoveReference<ParamT5>::Type>::Type
        NqParamT5;
    
    FunctionImpl_6_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>(),
            getType<ParamT4>(),
            getType<ParamT5>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg6);
        (void)(arg7);
        function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>(),
            arg4.as<NqParamT4>(),
            arg5.as<NqParamT5>()
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5
    );
};


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6
>
class FunctionImpl_7_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    typedef typename RemoveConst<typename RemoveReference<ParamT4>::Type>::Type
        NqParamT4;
    typedef typename RemoveConst<typename RemoveReference<ParamT5>::Type>::Type
        NqParamT5;
    typedef typename RemoveConst<typename RemoveReference<ParamT6>::Type>::Type
        NqParamT6;
    
    FunctionImpl_7_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>(),
            getType<ParamT4>(),
            getType<ParamT5>(),
            getType<ParamT6>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg7);
        const NqRetT& returnValue = function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>(),
            arg4.as<NqParamT4>(),
            arg5.as<NqParamT5>(),
            arg6.as<NqParamT6>()
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6
    );
};


template
<
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6
>
class FunctionImpl_7_Params
<
    void,
    ParamT0,
    ParamT1,
    ParamT2,
    ParamT3,
    ParamT4,
    ParamT5,
    ParamT6
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    typedef typename RemoveConst<typename RemoveReference<ParamT4>::Type>::Type
        NqParamT4;
    typedef typename RemoveConst<typename RemoveReference<ParamT5>::Type>::Type
        NqParamT5;
    typedef typename RemoveConst<typename RemoveReference<ParamT6>::Type>::Type
        NqParamT6;
    
    FunctionImpl_7_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>(),
            getType<ParamT4>(),
            getType<ParamT5>(),
            getType<ParamT6>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        (void)(arg7);
        function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>(),
            arg4.as<NqParamT4>(),
            arg5.as<NqParamT5>(),
            arg6.as<NqParamT6>()
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6
    );
};


template
<
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6,
    typename ParamT7
>
class FunctionImpl_8_Params : public Function
{
public: 
    /// type of the return value without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<RetT>::Type>::Type
        NqRetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    typedef typename RemoveConst<typename RemoveReference<ParamT4>::Type>::Type
        NqParamT4;
    typedef typename RemoveConst<typename RemoveReference<ParamT5>::Type>::Type
        NqParamT5;
    typedef typename RemoveConst<typename RemoveReference<ParamT6>::Type>::Type
        NqParamT6;
    typedef typename RemoveConst<typename RemoveReference<ParamT7>::Type>::Type
        NqParamT7;
    
    FunctionImpl_8_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6,
            ParamT7
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>(),
            getType<ParamT4>(),
            getType<ParamT5>(),
            getType<ParamT6>(),
            getType<ParamT7>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        if (IsReference<RetT>::value)
        {
            if (IsConst<RetT>::value)
                return ConstReference;
            else
                return Reference;
        }
        else
            return Value;
    }
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        const NqRetT& returnValue = function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>(),
            arg4.as<NqParamT4>(),
            arg5.as<NqParamT5>(),
            arg6.as<NqParamT6>(),
            arg7.as<NqParamT7>()
        );
        return Variant(const_cast<NqRetT&>(returnValue),
                ReturnVariantFlags<RetT>::flags);
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6,
        ParamT7
    );
};


template
<
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6,
    typename ParamT7
>
class FunctionImpl_8_Params
<
    void,
    ParamT0,
    ParamT1,
    ParamT2,
    ParamT3,
    ParamT4,
    ParamT5,
    ParamT6,
    ParamT7
> : public Function
{
public: 
        typedef void RetT;

    /// type of the arguments without any cv-qualifier and no reference
    typedef typename RemoveConst<typename RemoveReference<ParamT0>::Type>::Type
        NqParamT0;
    typedef typename RemoveConst<typename RemoveReference<ParamT1>::Type>::Type
        NqParamT1;
    typedef typename RemoveConst<typename RemoveReference<ParamT2>::Type>::Type
        NqParamT2;
    typedef typename RemoveConst<typename RemoveReference<ParamT3>::Type>::Type
        NqParamT3;
    typedef typename RemoveConst<typename RemoveReference<ParamT4>::Type>::Type
        NqParamT4;
    typedef typename RemoveConst<typename RemoveReference<ParamT5>::Type>::Type
        NqParamT5;
    typedef typename RemoveConst<typename RemoveReference<ParamT6>::Type>::Type
        NqParamT6;
    typedef typename RemoveConst<typename RemoveReference<ParamT7>::Type>::Type
        NqParamT7;
    
    FunctionImpl_8_Params(
        const std::string& uName,
        const xm::Namespace& name_space,
        RetT function
        (
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6,
            ParamT7
        )) :
        Item(uName, name_space),
        Function(
            uName,
            getType<RetT>(),
            getType<ParamT0>(),
            getType<ParamT1>(),
            getType<ParamT2>(),
            getType<ParamT3>(),
            getType<ParamT4>(),
            getType<ParamT5>(),
            getType<ParamT6>(),
            getType<ParamT7>()
        ),
        function_(function)
    {
    }

    
    Function::ReturnMode getReturnMode() const
    {
        return None;
    }
    
    
    
    Variant callImpl
    (   
        Variant& arg0,
        Variant& arg1,
        Variant& arg2,
        Variant& arg3,
        Variant& arg4,
        Variant& arg5,
        Variant& arg6,
        Variant& arg7
        
    ) const
    {
        function_
        (
            arg0.as<NqParamT0>(),
            arg1.as<NqParamT1>(),
            arg2.as<NqParamT2>(),
            arg3.as<NqParamT3>(),
            arg4.as<NqParamT4>(),
            arg5.as<NqParamT5>(),
            arg6.as<NqParamT6>(),
            arg7.as<NqParamT7>()
        );
        return Variant::Void;
        
    }

private:
    RetT (*function_)
    (
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6,
        ParamT7
    );
};



} // namespace xm

#endif /* XM_FUNCTIONIMPL_HPP */