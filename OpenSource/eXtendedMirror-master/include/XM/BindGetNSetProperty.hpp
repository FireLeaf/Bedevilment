/* WARNING: This file has been autogenerated. Do not modify it directly! */

#ifndef XM_BINDGETNSETPROPERTY_HPP
#define	XM_BINDGETNSETPROPERTY_HPP


#define XM_GET_N_SET_EXTRA_PARAM_MAX 3


namespace xm{



template
<
    class ClassT,
    typename RetT
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
    )
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_0_ExtrParams
        <
            ClassT,
            RetT,
            Empty
        >
        (
            uName,
            getter,
            false,
            setter
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
    ) const
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
            )
        >(getter);
        
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_0_ExtrParams
        <
            ClassT,
            RetT,
            Empty
        >
        (
            uName,
            getter_nc,
            true,
            setter
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ParamT
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
    ),
    void (ClassT::*setter)
    (
        ParamT
    )
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_0_ExtrParams
        <
            ClassT,
            RetT,
            ParamT
        >
        (
            uName,
            getter,
            false,
            setter
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ParamT
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
    ) const,
    void (ClassT::*setter)
    (
        ParamT
    )
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
            )
        >(getter);
        
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_0_ExtrParams
        <
            ClassT,
            RetT,
            ParamT
        >
        (
            uName,
            getter_nc,
            true,
            setter
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0
    ),
    ExtrParamT0 extrArg0
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_1_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0
        >
        (
            uName,
            getter,
            false,
            setter,
            extrArg0
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0
    ) const,
    ExtrParamT0 extrArg0
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0
            )
        >(getter);
        
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_1_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0
        >
        (
            uName,
            getter_nc,
            true,
            setter,
            extrArg0
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0
    ),
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0
    ),
    ExtrParamT0 extrArg0
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_1_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0
        >
        (
            uName,
            getter,
            false,
            setter,
            extrArg0
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0
    ) const,
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0
    ),
    ExtrParamT0 extrArg0
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0
            )
        >(getter);
        
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_1_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0
        >
        (
            uName,
            getter_nc,
            true,
            setter,
            extrArg0
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0,
    typename ExtrParamT1
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_2_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0,
            ExtrParamT1
        >
        (
            uName,
            getter,
            false,
            setter,
            extrArg0,
            extrArg1
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0,
    typename ExtrParamT1
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1
    ) const,
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0,
                ExtrParamT1
            )
        >(getter);
        
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_2_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0,
            ExtrParamT1
        >
        (
            uName,
            getter_nc,
            true,
            setter,
            extrArg0,
            extrArg1
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0,
    typename ExtrParamT1
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1
    ),
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0,
        ExtrParamT1
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_2_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0,
            ExtrParamT1
        >
        (
            uName,
            getter,
            false,
            setter,
            extrArg0,
            extrArg1
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0,
    typename ExtrParamT1
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1
    ) const,
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0,
        ExtrParamT1
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0,
                ExtrParamT1
            )
        >(getter);
        
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_2_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0,
            ExtrParamT1
        >
        (
            uName,
            getter_nc,
            true,
            setter,
            extrArg0,
            extrArg1
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0,
    typename ExtrParamT1,
    typename ExtrParamT2
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1,
    ExtrParamT2 extrArg2
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_3_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0,
            ExtrParamT1,
            ExtrParamT2
        >
        (
            uName,
            getter,
            false,
            setter,
            extrArg0,
            extrArg1,
            extrArg2
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0,
    typename ExtrParamT1,
    typename ExtrParamT2
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ) const,
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1,
    ExtrParamT2 extrArg2
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0,
                ExtrParamT1,
                ExtrParamT2
            )
        >(getter);
        
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_3_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0,
            ExtrParamT1,
            ExtrParamT2
        >
        (
            uName,
            getter_nc,
            true,
            setter,
            extrArg0,
            extrArg1,
            extrArg2
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0,
    typename ExtrParamT1,
    typename ExtrParamT2
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ),
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1,
    ExtrParamT2 extrArg2
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_3_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0,
            ExtrParamT1,
            ExtrParamT2
        >
        (
            uName,
            getter,
            false,
            setter,
            extrArg0,
            extrArg1,
            extrArg2
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0,
    typename ExtrParamT1,
    typename ExtrParamT2
>
Property& bindProperty(
    const std::string& uName,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ) const,
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1,
    ExtrParamT2 extrArg2
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0,
                ExtrParamT1,
                ExtrParamT2
            )
        >(getter);
        
    
    // build the Property
    Property* xmProperty =
        new PropertyGetterNSetter_3_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0,
            ExtrParamT1,
            ExtrParamT2
        >
        (
            uName,
            getter_nc,
            true,
            setter,
            extrArg0,
            extrArg1,
            extrArg2
        );
    const_cast<Class&>(getClass<ClassT>()).addMember(*xmProperty);
    return *xmProperty;
}



} // namespace xm

#endif	/* XM_BINDGETNSETPROPERTY_HPP */